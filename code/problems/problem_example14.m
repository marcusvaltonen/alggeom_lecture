function [eqs,data0,eqs_data] = problem_example14(data0)

nbr_unknowns = 3;
nbr_generic_coeffs = 9*4;

if nargin < 1 || isempty(data0)
    % no input, generate a random integer instance
    data0 = randi(30, nbr_generic_coeffs, 1);
end

% Step 4: Compute null space basis
% Note: We lock the scale by letting one of the null space parameters
% be equal to one.
N = reshape(data0, 9, 4);
xx = create_vars(nbr_unknowns);
H = reshape(N * [xx; 1], 3, 3);

x1 = H(1,1); x2 = H(2,1); x3 = H(3,1);
x4 = H(1,2); x5 = H(2,2); x6 = H(3,2);
x7 = H(1,3); x8 = H(2,3); x9 = H(3,3);

% Step 5: Substitute into the generators
eqs = [...
    -x1^3*x7 - x1^2*x4*x8 + x1^2*x5*x7 - x1*x2^2*x7 - 2*x1*x2*x4*x7 + x1*x2*x5*x6 + x1*x2*x8*x9 - x1*x3^2*x7 - x1*x3*x5^2 + x1*x3*x5*x9 - x1*x3*x6*x8 - 2*x1*x3*x7^2 - x1*x3*x8^2 + x1*x5*x7*x9 - x1*x6*x7*x8 - x2^2*x4*x6 - x2^2*x4*x8 - x2^2*x5*x7 - x2^2*x7*x9 + x2*x3*x4*x5 - x2*x3*x4*x9 - x2*x3*x6*x7 - x2*x3*x7*x8 - x2*x4^2*x8 - x2*x4*x7*x9 - x2*x5^2*x8 - x2*x6^2*x8 - x2*x6*x8^2 - x2*x6*x9^2 - 2*x3^2*x7*x9 - x3*x4*x7*x8 - x3*x5*x8^2 + x3*x5*x9^2 - 2*x3*x6*x8*x9 - x3*x7^2*x9 - x3*x8^2*x9 - x3*x9^3 + x4*x5*x8*x9 - x4*x6*x8^2 - x5^2*x7*x9 + x5*x6*x7*x8; ...
    -x1^2*x5*x9 + x1^2*x6^2 + x1^2*x6*x8 + x1^2*x7^2 + x1^2*x9^2 + x1*x2*x4*x9 - x1*x2*x6*x7 - 2*x1*x3*x4*x6 - x1*x3*x4*x8 + x1*x3*x5*x7 - 2*x1*x3*x7*x9 - x1*x4^2*x5 + x1*x4^2*x9 - 2*x1*x4*x6*x7 - x1*x5^3 + 2*x1*x5^2*x9 - x1*x5*x6^2 - 3*x1*x5*x6*x8 - 2*x1*x5*x8^2 + x1*x5*x9^2 - x1*x6^2*x9 - 3*x1*x6*x8*x9 - 2*x1*x8^2*x9 - 2*x1*x9^3 + x2^2*x7^2 + x2*x4^3 + x2*x4*x5^2 - x2*x4*x5*x9 + x2*x4*x6^2 + 2*x2*x4*x7^2 - x2*x4*x9^2 + x2*x5*x6*x7 + 4*x2*x5*x7*x8 + 3*x2*x6*x7*x9 + 2*x2*x7*x8*x9 + x3^2*x4^2 + 2*x3^2*x7^2 + x3*x4^2*x7 + 3*x3*x4*x5*x8 + 2*x3*x4*x6*x9 + x3*x4*x8*x9 - 2*x3*x5^2*x7 - x3*x5*x7*x9 - x3*x6^2*x7 + 2*x3*x6*x7*x8 + 2*x3*x7^3 + 2*x3*x7*x8^2 + 4*x3*x7*x9^2 + x4^2*x5*x9 - x4^2*x6*x8 - x4^2*x8^2 - x4^2*x9^2 + 4*x4*x5*x7*x8 + 2*x4*x6*x7*x9 + 2*x4*x7*x8*x9 + x5^3*x9 - x5^2*x6*x8 - 2*x5^2*x7^2 + x5^2*x8^2 - 2*x5^2*x9^2 + x5*x6^2*x9 + 4*x5*x6*x8*x9 + 2*x5*x8^2*x9 - x6^3*x8 - x6^2*x7^2 - x6^2*x8^2 + 2*x6*x8*x9^2 + x7^2*x9^2 + x8^2*x9^2 + x9^4; ...
    x1^2*x4*x7 + x1^2*x5*x6 + x1^2*x8*x9 - x1*x2*x4*x6 - x1*x2*x7*x9 - x1*x3*x4*x5 - x1*x3*x7*x8 + x1*x4^2*x8 - x1*x5^2*x8 - x1*x5*x6*x9 - x1*x5*x8*x9 + x1*x6*x7^2 - x1*x6*x9^2 + x2^2*x4*x7 + x2*x3*x4^2 + x2*x3*x7^2 + x2*x4^2*x7 + 2*x2*x4*x5*x8 + x2*x4*x6*x9 + x2*x4*x8*x9 + x2*x5^2*x7 + x2*x6*x7*x8 + x3^2*x4*x7 + x3*x4*x6*x8 + x3*x4*x7^2 + x3*x4*x9^2 + x3*x5*x6*x7 + x3*x5*x7*x8 + 2*x3*x6*x7*x9 + x4^2*x5*x8 + x4^2*x8*x9 - x4*x5*x7*x9 + x4*x6*x7*x8 + x5^3*x8 + x5*x6^2*x8 + x5*x6*x7^2 + 2*x5*x6*x8^2 + 2*x6^2*x8*x9 + x6*x7^2*x9 + x6*x8^2*x9 + x6*x9^3; ...
    2*x1^3*x7 - x1^2*x4*x6 + x1^2*x4*x8 - x1^2*x5*x7 - x1^2*x7*x9 + 2*x1*x2^2*x7 + 4*x1*x2*x4*x7 - 2*x1*x2*x5*x6 - 2*x1*x2*x8*x9 + 2*x1*x3^2*x7 + x1*x3*x4^2 + x1*x3*x5^2 - x1*x3*x6^2 + 5*x1*x3*x7^2 + x1*x3*x8^2 - x1*x3*x9^2 + 2*x1*x4*x5*x8 + 2*x1*x4*x6*x9 - 2*x1*x5^2*x7 - 2*x1*x6^2*x7 + x2^2*x4*x6 + x2^2*x4*x8 + 3*x2^2*x5*x7 + x2^2*x7*x9 + 4*x2*x3*x6*x7 + 4*x2*x3*x7*x8 - x2*x4^2*x6 + 2*x2*x4*x5*x7 - x2*x5^2*x6 + 2*x2*x5^2*x8 + 2*x2*x5*x6*x9 - x2*x6^3 + x2*x6*x7^2 + x2*x6*x8^2 + x2*x6*x9^2 + x3^2*x4*x6 + x3^2*x4*x8 - x3^2*x5*x7 + 5*x3^2*x7*x9 + x3*x4^2*x5 - 2*x3*x4^2*x9 + 2*x3*x4*x6*x7 + 4*x3*x4*x7*x8 + x3*x5^3 - 2*x3*x5^2*x9 + x3*x5*x6^2 + 2*x3*x5*x6*x8 - x3*x5*x7^2 + 3*x3*x5*x8^2 - x3*x5*x9^2 + 4*x3*x6*x8*x9 + 2*x3*x7^2*x9 + 2*x3*x8^2*x9 + 2*x3*x9^3 - x4^3*x8 + x4^2*x5*x7 - x4^2*x7*x9 - x4*x5^2*x8 - 2*x4*x5*x8*x9 - x4*x6^2*x8 + x4*x6*x7^2 + x4*x6*x8^2 - x4*x6*x9^2 + x5^3*x7 + x5^2*x7*x9 + x5*x6^2*x7 + x6^2*x7*x9; ...
    x1^2*x5^2 - x1^2*x5*x9 + x1^2*x6*x8 - x1^2*x7^2 + x1^2*x8^2 - 2*x1*x2*x4*x5 + x1*x2*x4*x9 - x1*x2*x6*x7 - 2*x1*x2*x7*x8 - x1*x3*x4*x8 + x1*x3*x5*x7 - 2*x1*x4*x7*x8 - x1*x5^2*x9 + x1*x5*x6*x8 + x1*x5*x7^2 + x1*x5*x8^2 + x1*x6*x8*x9 - x1*x7^2*x9 + x1*x8^2*x9 + x1*x9^3 + x2^2*x4^2 + x2*x4*x5*x9 - x2*x4*x7^2 - x2*x4*x8^2 - x2*x5*x6*x7 - 2*x2*x5*x7*x8 - x2*x6*x7*x9 - 2*x2*x7*x8*x9 - x3^2*x7^2 - x3*x4*x5*x8 - x3*x4*x8*x9 + x3*x5^2*x7 + x3*x5*x7*x9 - 2*x3*x6*x7*x8 - x3*x7^3 - x3*x7*x8^2 - 3*x3*x7*x9^2 - 2*x4*x5*x7*x8 - 2*x4*x7*x8*x9 + x5^2*x7^2 - x5^2*x8^2 + x5*x7^2*x9 - x5*x8^2*x9 + x5*x9^3 - x6^2*x8^2 - x6*x7^2*x8 - x6*x8^3 - 3*x6*x8*x9^2 - x7^2*x9^2 - x8^2*x9^2 - x9^4; ...
    -x1^2*x4*x5 + x1^2*x4*x9 - x1^2*x6*x7 - x1^2*x7*x8 + x1*x2*x4^2 - x1*x2*x5^2 + 2*x1*x2*x5*x9 - x1*x2*x6^2 - 2*x1*x2*x6*x8 + x1*x2*x7^2 - x1*x2*x8^2 - x1*x2*x9^2 + 2*x1*x4*x5*x9 - 2*x1*x4*x6*x8 - 2*x1*x4*x8^2 - 2*x1*x4*x9^2 + 2*x1*x5*x7*x8 + 2*x1*x6*x7*x9 + x2^2*x4*x5 - x2^2*x4*x9 + x2^2*x6*x7 + x2^2*x7*x8 + 2*x2*x3*x4*x6 + 2*x2*x3*x4*x8 - 2*x2*x3*x5*x7 + 2*x2*x3*x7*x9 - x2*x4^2*x9 + 2*x2*x4*x6*x7 + 2*x2*x4*x7*x8 + x2*x5^2*x9 - 2*x2*x5*x7^2 - 2*x2*x5*x9^2 + x2*x6^2*x9 + 2*x2*x6*x8*x9 + x2*x7^2*x9 + x2*x8^2*x9 + x2*x9^3 - x3^2*x4*x5 + x3^2*x4*x9 - x3^2*x6*x7 - x3^2*x7*x8 + x3*x4^2*x8 - 2*x3*x4*x5*x7 + 2*x3*x4*x7*x9 - x3*x5^2*x8 + 2*x3*x5*x8*x9 - x3*x6^2*x8 - 2*x3*x6*x7^2 - 2*x3*x6*x8^2 - x3*x7^2*x8 - x3*x8^3 - x3*x8*x9^2 + x4^2*x7*x8 - x4*x5*x7^2 + x4*x5*x8^2 - x4*x5*x9^2 + 2*x4*x6*x8*x9 + x4*x7^2*x9 + x4*x8^2*x9 + x4*x9^3 - x5^2*x7*x8 - x6^2*x7*x8 - x6*x7^3 - x6*x7*x8^2 - x6*x7*x9^2; ...
    x1^2*x4^2 - x1^2*x5^2 + 2*x1^2*x5*x9 - x1^2*x6^2 - 2*x1^2*x6*x8 + x1^2*x7^2 - x1^2*x8^2 - x1^2*x9^2 + 2*x1*x2*x4*x5 - 2*x1*x2*x4*x9 + 2*x1*x2*x6*x7 + 2*x1*x2*x7*x8 + 2*x1*x3*x4*x6 + 2*x1*x3*x4*x8 - 2*x1*x3*x5*x7 + 2*x1*x3*x7*x9 + x1*x4^2*x5 - x1*x4^2*x9 + 2*x1*x4*x6*x7 + 2*x1*x4*x7*x8 - x1*x5^3 + x1*x5^2*x9 - x1*x5*x6^2 - 2*x1*x5*x6*x8 - x1*x5*x7^2 - x1*x5*x8^2 + x1*x5*x9^2 - x1*x6^2*x9 - 2*x1*x6*x8*x9 + x1*x7^2*x9 - x1*x8^2*x9 - x1*x9^3 + x2*x4^3 + 3*x2*x4*x5^2 - 2*x2*x4*x5*x9 + x2*x4*x6^2 + 2*x2*x4*x6*x8 + x2*x4*x7^2 + x2*x4*x8^2 - x2*x4*x9^2 + 2*x2*x5*x6*x7 + 2*x2*x5*x7*x8 + 2*x2*x6*x7*x9 + 2*x2*x7*x8*x9 + x3*x4^2*x7 + 2*x3*x4*x5*x6 + 2*x3*x4*x5*x8 + 2*x3*x4*x6*x9 + 2*x3*x4*x8*x9 - x3*x5^2*x7 - 2*x3*x5*x7*x9 + x3*x6^2*x7 + 2*x3*x6*x7*x8 + x3*x7^3 + x3*x7*x8^2 + 3*x3*x7*x9^2 + x4^2*x5^2 - x4^2*x5*x9 + x4^2*x6*x8 - x4^2*x9^2 + 2*x4*x5*x6*x7 + 2*x4*x5*x7*x8 + 2*x4*x6*x7*x9 + 2*x4*x7*x8*x9 + x5^4 - x5^3*x9 + x5^2*x6^2 + 3*x5^2*x6*x8 - x5^2*x7^2 + x5^2*x8^2 + x5*x6^2*x9 - x5*x7^2*x9 + x5*x8^2*x9 - x5*x9^3 + x6^3*x8 + 2*x6^2*x8^2 + x6^2*x9^2 + x6*x7^2*x8 + x6*x8^3 + 3*x6*x8*x9^2 + x7^2*x9^2 + x8^2*x9^2 + x9^4; ...
    -x1^3*x6 - x1^3*x8 + x1^2*x2*x7 + x1^2*x3*x4 - x1^2*x4*x7 + 2*x1^2*x5*x8 + 2*x1^2*x6*x9 - x1*x2^2*x6 - x1*x2^2*x8 - x1*x2*x4*x6 - 2*x1*x2*x4*x8 - 2*x1*x2*x5*x7 + x1*x2*x7*x9 - x1*x3^2*x6 - x1*x3^2*x8 + x1*x3*x4*x5 - 2*x1*x3*x4*x9 - 2*x1*x3*x6*x7 - x1*x3*x7*x8 - 2*x1*x4^2*x8 - x1*x5*x6*x9 - x1*x5*x8*x9 + x1*x6^2*x8 - 2*x1*x6*x7^2 + x1*x6*x8^2 + x2^3*x7 + x2^2*x3*x4 + x2^2*x4*x7 - x2^2*x5*x6 + 2*x2^2*x6*x9 + x2^2*x8*x9 + x2*x3^2*x7 + x2*x3*x5^2 - 2*x2*x3*x5*x9 - x2*x3*x6^2 - 2*x2*x3*x6*x8 - x2*x3*x8^2 + x2*x3*x9^2 - 2*x2*x4*x5*x8 + x2*x4*x6*x9 + x2*x4*x8*x9 - x2*x6^2*x7 - 3*x2*x6*x7*x8 + x3^3*x4 + x3^2*x4*x7 + x3^2*x5*x6 + 2*x3^2*x5*x8 - x3^2*x8*x9 - 3*x3*x4*x6*x8 - x3*x4*x8^2 + x3*x5*x6*x7 + x3*x5*x7*x8 - 2*x3*x6*x7*x9 - x4^2*x5*x8 + x4*x5*x7*x9 - 3*x4*x6*x7*x8 - x5^3*x8 + x5^2*x8*x9 - x5*x6^2*x8 - 3*x5*x6*x8^2 + x5*x6*x9^2 - 3*x6^2*x8*x9 - x6*x7^2*x9 - x6*x8^2*x9 - x6*x9^3'
    -x1^3*x5 + x1^3*x9 + x1^2*x2*x4 - x1^2*x3*x7 + 2*x1^2*x5*x9 - 2*x1^2*x6*x8 + x1^2*x7^2 - 2*x1^2*x8^2 - 2*x1^2*x9^2 - x1*x2^2*x5 + x1*x2^2*x9 - x1*x2*x4*x9 + 3*x1*x2*x6*x7 + 4*x1*x2*x7*x8 - x1*x3^2*x5 + x1*x3^2*x9 + x1*x3*x4*x8 - 3*x1*x3*x5*x7 + 4*x1*x3*x7*x9 + 4*x1*x4*x7*x8 - x1*x5^2*x9 + x1*x5*x6*x8 - 2*x1*x5*x7^2 + x1*x5*x9^2 - x1*x6*x8*x9 + 2*x1*x7^2*x9 + x2^3*x4 - x2^2*x3*x7 + x2^2*x5*x9 + x2^2*x6^2 + x2^2*x6*x8 - x2^2*x7^2 - x2^2*x9^2 + x2*x3^2*x4 - 2*x2*x3*x5*x6 - 2*x2*x3*x5*x8 + 2*x2*x3*x6*x9 + 2*x2*x3*x8*x9 + x2*x4*x5*x9 + 2*x2*x4*x8^2 - x2*x4*x9^2 - x2*x5*x6*x7 + x2*x6*x7*x9 + 2*x2*x7*x8*x9 - x3^3*x7 + x3^2*x5^2 - x3^2*x5*x9 - x3^2*x6*x8 - x3^2*x7^2 - x3^2*x8^2 - x3*x4*x5*x8 + 3*x3*x4*x8*x9 + x3*x5^2*x7 - 3*x3*x5*x7*x9 + 2*x3*x6*x7*x8 + 2*x3*x7*x9^2 + x4^2*x8^2 + 2*x4*x7*x8*x9 + x5^2*x8^2 + x5^2*x9^2 - 2*x5*x6*x8*x9 - 2*x5*x7^2*x9 - 2*x5*x9^3 + 2*x6^2*x8^2 + 2*x6*x7^2*x8 + 2*x6*x8^3 + 4*x6*x8*x9^2 + x7^2*x9^2 + x8^2*x9^2 + x9^4; ...
    x1^3*x4 + 2*x1^2*x4*x5 - 3*x1^2*x4*x9 + 3*x1^2*x6*x7 + 2*x1^2*x7*x8 + x1*x2^2*x4 + 2*x1*x2*x5^2 - 5*x1*x2*x5*x9 + 3*x1*x2*x6^2 + 5*x1*x2*x6*x8 - 2*x1*x2*x7^2 + 2*x1*x2*x8^2 + 3*x1*x2*x9^2 + x1*x3^2*x4 + 2*x1*x3*x4*x7 - x1*x3*x5*x6 - x1*x3*x8*x9 - 5*x1*x4*x5*x9 + 5*x1*x4*x6*x8 + 4*x1*x4*x8^2 + 4*x1*x4*x9^2 - 4*x1*x5*x7*x8 - 4*x1*x6*x7*x9 + 2*x2^2*x4*x9 - 2*x2^2*x6*x7 - 2*x2^2*x7*x8 - 3*x2*x3*x4*x6 - 3*x2*x3*x4*x8 + 5*x2*x3*x5*x7 - 5*x2*x3*x7*x9 + x2*x4^2*x5 + 2*x2*x4^2*x9 - 3*x2*x4*x6*x7 - 4*x2*x4*x7*x8 + x2*x5^3 - 3*x2*x5^2*x9 + x2*x5*x6^2 + 2*x2*x5*x6*x8 + 4*x2*x5*x7^2 + 4*x2*x5*x9^2 - x2*x6^2*x9 - 4*x2*x6*x8*x9 - 2*x2*x7^2*x9 - 2*x2*x8^2*x9 - 2*x2*x9^3 + 3*x3^2*x4*x5 - x3^2*x4*x9 + 3*x3^2*x6*x7 + 3*x3^2*x7*x8 - 2*x3*x4^2*x8 + 5*x3*x4*x5*x7 - 4*x3*x4*x7*x9 + 3*x3*x5^2*x8 - 4*x3*x5*x8*x9 + 3*x3*x6^2*x8 + 5*x3*x6*x7^2 + 5*x3*x6*x8^2 + x3*x6*x9^2 + 2*x3*x7^2*x8 + 2*x3*x8^3 + 2*x3*x8*x9^2 - 2*x4^2*x7*x8 + 2*x4*x5*x7^2 - 2*x4*x5*x8^2 + 3*x4*x5*x9^2 - 5*x4*x6*x8*x9 - 2*x4*x7^2*x9 - 2*x4*x8^2*x9 - 2*x4*x9^3 + 2*x5^2*x7*x8 - x5*x6*x7*x9 + 3*x6^2*x7*x8 + 2*x6*x7^3 + 2*x6*x7*x8^2 + 2*x6*x7*x9^2; ...
    x1^4 + 2*x1^3*x5 - 4*x1^3*x9 + x1^2*x2^2 + x1^2*x3^2 + 6*x1^2*x3*x7 - x1^2*x5^2 - 5*x1^2*x5*x9 + 5*x1^2*x6*x8 - 2*x1^2*x7^2 + 5*x1^2*x8^2 + 6*x1^2*x9^2 + 4*x1*x2^2*x5 - 4*x1*x2^2*x9 + 2*x1*x2*x3*x6 + 2*x1*x2*x3*x8 + 2*x1*x2*x4*x5 + x1*x2*x4*x9 - 7*x1*x2*x6*x7 - 10*x1*x2*x7*x8 + 2*x1*x3^2*x5 - 2*x1*x3^2*x9 - x1*x3*x4*x8 + 7*x1*x3*x5*x7 - 12*x1*x3*x7*x9 - 10*x1*x4*x7*x8 + 5*x1*x5^2*x9 - 5*x1*x5*x6*x8 + 5*x1*x5*x7^2 - x1*x5*x8^2 - 2*x1*x5*x9^2 + x1*x6*x8*x9 - 5*x1*x7^2*x9 - x1*x8^2*x9 - x1*x9^3 - 2*x2^3*x4 + 4*x2^2*x3*x7 + x2^2*x5^2 - 4*x2^2*x5*x9 - 3*x2^2*x6^2 - 2*x2^2*x6*x8 + 3*x2^2*x7^2 + 2*x2^2*x9^2 - 2*x2*x3^2*x4 + 2*x2*x3*x4*x7 + 8*x2*x3*x5*x6 + 8*x2*x3*x5*x8 - 4*x2*x3*x6*x9 - 4*x2*x3*x8*x9 - 5*x2*x4*x5*x9 + x2*x4*x7^2 - 5*x2*x4*x8^2 + 2*x2*x4*x9^2 + 5*x2*x5*x6*x7 + 2*x2*x5*x7*x8 - x2*x6*x7*x9 - 4*x2*x7*x8*x9 + 4*x3^3*x7 - 4*x3^2*x5^2 + 2*x3^2*x5*x9 + 4*x3^2*x6*x8 + 5*x3^2*x7^2 + 3*x3^2*x8^2 + x3^2*x9^2 + 5*x3*x4*x5*x8 - 7*x3*x4*x8*x9 - 5*x3*x5^2*x7 + 7*x3*x5*x7*x9 - 4*x3*x6*x7*x8 + x3*x7^3 + x3*x7*x8^2 - 3*x3*x7*x9^2 - 3*x4^2*x8^2 + 2*x4*x5*x7*x8 - 4*x4*x7*x8*x9 - x5^2*x7^2 - 2*x5^2*x8^2 - 4*x5^2*x9^2 + 8*x5*x6*x8*x9 + 5*x5*x7^2*x9 + x5*x8^2*x9 + 5*x5*x9^3 - 6*x6^2*x8^2 - 5*x6*x7^2*x8 - 5*x6*x8^3 - 9*x6*x8*x9^2 - 2*x7^2*x9^2 - 2*x8^2*x9^2 - 2*x9^4];

% Setup equation with data as additional unknowns
if nargout == 3
    xx = create_vars(nbr_unknowns + nbr_generic_coeffs);
    eqs_data = problem_example14(xx(nbr_unknowns+1:end));
end